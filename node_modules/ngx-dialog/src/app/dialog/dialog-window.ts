import {
  Component,
  HostBinding,
  Output,
  EventEmitter,
  Input,
  ElementRef,
  Renderer2,
  OnInit,
  AfterViewInit,
  OnDestroy
} from '@angular/core';

import { getScrollbarWidth } from '../util/scrollbar-width';


@Component({
  selector: 'ngx-dialog-window',
  host: {
    '[class]': '"ngx-dialog-window" + (windowClass ? " " + windowClass : "")',
    'role': 'dialog',
    'tabindex': '-1',
    'style': 'display: flex;',
    '(keyup.esc)': 'escKey($event)',
    '(click)': 'backdropClick($event)'
  },
  template: `
    <div [class]="'ngx-dialog-document' + (size ? ' ngx-dialog-' + size : '')" role="document">
        <div class="ngx-dialog-close" (click)="dismiss('CLOSE_BTN')"><span></span></div>
        <div class="ngx-dialog-content"><ng-content></ng-content></div>
    </div>
    `
})
export class NgxDialogWindow implements OnInit, AfterViewInit, OnDestroy {
  private _elWithFocus: Element;  // element that is focused prior to dialog opening
  private shown = false;

  @Input() backdrop: boolean | string = true;
  @Input() keyboard = true;
  @Input() size: string;
  @Input() windowClass: string;

  @Output('dismiss') dismissEvent = new EventEmitter();

  @HostBinding( "class.shown" ) get fadeIn() {
    return this.shown;
  }

  constructor(private _elRef: ElementRef, private _renderer: Renderer2) {}

  backdropClick($event:any): void {
    if (this.backdrop === true && this._elRef.nativeElement === $event.target) {
      this.dismiss('BACKDROP_CLICK');
    }
  }

  escKey($event:any): void {
    if (this.keyboard && !$event.defaultPrevented) {
      this.dismiss('ESC');
    }
  }

  dismiss(reason:any): void { this.dismissEvent.emit(reason); }

  ngOnInit() {
    let scrollbarWidth = getScrollbarWidth();
    this._elWithFocus = document.activeElement;
    this._renderer.addClass(document.body, 'ngx-dialog-open');

    if( scrollbarWidth>0 ) {
      document.body.style.paddingRight = scrollbarWidth + 'px';
    }

    setTimeout( ()=> {
      this.shown = true;
    }, 20 );

  }

  ngAfterViewInit() {
    if (!this._elRef.nativeElement.contains(document.activeElement)) {
      this._elRef.nativeElement['focus'].apply(this._elRef.nativeElement, []);
    }
  }

  ngOnDestroy() {
    const body = document.body;
    const elWithFocus = this._elWithFocus;
    body.style.removeProperty('padding-right');

    let elementToFocus;
    if (elWithFocus && elWithFocus['focus'] && body.contains(elWithFocus)) {
      elementToFocus = elWithFocus;
    } else {
      elementToFocus = body;
    }
    elementToFocus['focus'].apply(elementToFocus, []);

    this._elWithFocus = null;
    this._renderer.removeClass(body, 'ngx-dialog-open');
  }
}
