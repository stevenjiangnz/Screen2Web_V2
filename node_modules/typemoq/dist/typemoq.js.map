{"version":3,"file":"typemoq.js","sources":["Api/Api/Api/MockBehavior.ts","Api/Api/Api/ExpectedCallType.ts","Error/Error/Error/Exception.ts","Error/Error/Error/MockException.ts","Api/Api/Api/Times.ts","Common/Common/Common/PropertyRetriever.ts","Consts.ts","Match/Match/Match/Match.ts","Common/Common/Common/Utils.ts","Match/Match/Match/MatchAny.ts","Match/Match/Match/MatchPred.ts","Match/Match/Match/MatchValue.ts","Match/Match/Match/MatchObjectWith.ts","Proxy/Proxy/Proxy/ICallContext.ts","Proxy/Proxy/Proxy/Invocation.ts","Proxy/Proxy/Proxy/ProxyES5.ts","Proxy/Proxy/Proxy/ProxyES6.ts","Proxy/Proxy/Proxy/ProxyES6Handler.ts","Proxy/Proxy/Proxy/ProxyFactory.ts","MockBase.ts","InterceptorContext.ts","CurrentInterceptContext.ts","InterceptorStrategies.ts","InterceptorExecute.ts","InterceptorSetup.ts","MethodCall.ts","MethodCallReturn.ts","StaticMock.ts","DynamicMock.ts","Api/Api/Api/MockApi.ts","Api/Api/Api/It.ts","GlobalMock.ts","Api/Api/Api/GlobalMockApi.ts","GlobalScope.ts","Api/Api/Api/GlobalScopeApi.ts"],"sourcesContent":["export enum MockBehavior { Loose, Strict }","export enum ExpectedCallType { InAnyOrder, InSequence }","export class Exception extends Error {\r\n    constructor(public name: string, message: string) {\r\n        super(message);\r\n        Object.setPrototypeOf(this, Exception.prototype);\r\n    }\r\n\r\n    toString(): string {\r\n        let errMsg = this.message ? `${this.name} - ${this.message}` : this.name;\r\n        return errMsg;\r\n    }\r\n}\r\n","import { Exception } from \"./Exception\";\r\n\r\nexport enum MockExceptionReason {\r\n    NoSetup = <any>\"no setup expression found for\",\r\n    MoreThanOneSetup = <any>\"more than one setup expression found for\",\r\n    InvalidArg = <any>\"invalid argument\",\r\n    InvalidSetup = <any>\"invalid setup expression\",\r\n    InvalidMatcher = <any>\"invalid matching expression\",\r\n    UnknownGlobalType = <any>\"unknown global type\",\r\n    CallCountVerificationFailed = <any>\"invocation count verification failed\",\r\n    CallOrderVerificationFailed = <any>\"invocation order verification failed\",\r\n    InvalidDynamicProxyRuntime = <any>\"invalid dynamic proxy runtime\"\r\n}\r\n\r\nexport class MockException extends Exception {\r\n    constructor(\r\n        public readonly reason: MockExceptionReason,\r\n        public readonly ctx: any,\r\n        public readonly message: string = undefined) {\r\n        super(\"MockException\", message);\r\n        Object.setPrototypeOf(this, MockException.prototype);\r\n    }\r\n\r\n    toString(): string {\r\n        let errMsg = `${this.name} - ${this.reason}`;\r\n        if (this.message)\r\n            errMsg = `${errMsg} (${this.message})`;\r\n        return errMsg;\r\n    }\r\n}","import * as _ from \"lodash\";\r\nimport * as common from \"../Common/_all\";\r\nimport * as error from \"../Error/_all\";\r\nimport * as proxy from \"../Proxy/_all\";\r\n\r\nexport class Times {\r\n\r\n    private static NO_MATCHING_CALLS_EXACTLY_N_TIMES = \"expected invocation of <%= i %> exactly <%= min %> times, invoked <%= c %> times\";\r\n    private static NO_MATCHING_CALLS_AT_LEAST_N_TIMES = \"expected invocation of <%= i %> at least <%= min %> times, invoked <%= c %> times\";\r\n    private static NO_MATCHING_CALLS_AT_MOST_N_TIMES = \"expected invocation of <%= i %> at most <%= max %> times, invoked <%= c %> times\";\r\n\r\n    private _lastCallCount: number;\r\n    private _failMessage: (...data: any[]) => string;\r\n\r\n    private constructor(\r\n        private _condition: common.IFunc2<number, boolean>,\r\n        public readonly min: number,\r\n        public readonly max: number,\r\n        failMessage: string) {\r\n        this._failMessage = _.template(failMessage);\r\n    }\r\n\r\n    failMessage(call: proxy.ICallContext) {\r\n        return this._failMessage({ i: call, min: this.min, max: this.max, c: this._lastCallCount });\r\n    }\r\n\r\n    verify(callCount: number): boolean {\r\n        this._lastCallCount = callCount;\r\n        return this._condition(callCount);\r\n    }\r\n\r\n    private static checkArg(n: number, target: string) {\r\n        if (n < 0)\r\n            throw new error.MockException(error.MockExceptionReason.InvalidArg,\r\n                undefined, `${target} argument cannot be a negative number`);\r\n    }\r\n\r\n    static exactly(n: number): Times {\r\n        Times.checkArg(n, \"'Times.exactly'\");\r\n        return new Times(c => c === n, n, n, Times.NO_MATCHING_CALLS_EXACTLY_N_TIMES);\r\n    }\r\n\r\n    static atLeast(n: number): Times {\r\n        Times.checkArg(n, \"'Times.atLeast'\");\r\n        return new Times(c => c >= n, n, 255, Times.NO_MATCHING_CALLS_AT_LEAST_N_TIMES);\r\n    }\r\n\r\n    static atMost(n: number): Times {\r\n        Times.checkArg(n, \"'Times.atMost'\");\r\n        return new Times(c => c >= 0 && c <= n, 0, n, Times.NO_MATCHING_CALLS_AT_MOST_N_TIMES);\r\n    }\r\n\r\n    static never(): Times {\r\n        return Times.exactly(0);\r\n    }\r\n\r\n    static once(): Times {\r\n        return Times.exactly(1);\r\n    }\r\n\r\n    static atLeastOnce(): Times {\r\n        return Times.atLeast(1);\r\n    }\r\n\r\n    static atMostOnce(): Times {\r\n        return Times.atMost(1);\r\n    }\r\n\r\n    toString(): string {\r\n        let res = \"\";\r\n        if (this.min === this.max) {\r\n            if (this.min === 0) {\r\n                res = \"never\";\r\n            } else if (this.min === 1) {\r\n                res = \"once\";\r\n            } else {\r\n                res = `${this.min} times`;\r\n            }\r\n        } else {\r\n            if (this.min === 0 && this.max !== 255)\r\n                res = `at most ${this.max} times`;\r\n            else\r\n                res = `at least ${this.min} times`;\r\n        }\r\n        return res;\r\n    }\r\n\r\n}\r\n","import * as _ from \"lodash\";\r\nimport { PropDescriptor } from \"./PropDescriptor\";\r\n\r\nexport class PropertyRetriever {\r\n\r\n    static getOwnEnumerables(obj: any) {\r\n        return this._getPropertyNames(obj, true, false, this._enumerable);\r\n        // Or could use for..in filtered with hasOwnProperty or just this: return Object.keys(obj);\r\n    }\r\n\r\n    static getOwnNonenumerables(obj: any) {\r\n        return this._getPropertyNames(obj, true, false, this._notEnumerable);\r\n    }\r\n\r\n    static getOwnEnumerablesAndNonenumerables(obj: any) {\r\n        return this._getPropertyNames(obj, true, false, this._enumerableAndNotEnumerable);\r\n        // Or just use: return Object.getOwnPropertyNames(obj);\r\n    }\r\n\r\n    static getPrototypeEnumerables(obj: any) {\r\n        return this._getPropertyNames(obj, false, true, this._enumerable);\r\n    }\r\n\r\n    static getPrototypeNonenumerables(obj: any) {\r\n        return this._getPropertyNames(obj, false, true, this._notEnumerable);\r\n    }\r\n\r\n    static getPrototypeEnumerablesAndNonenumerables(obj: any) {\r\n        return this._getPropertyNames(obj, false, true, this._enumerableAndNotEnumerable);\r\n    }\r\n\r\n    static getOwnAndPrototypeEnumerables(obj: any) {\r\n        return this._getPropertyNames(obj, true, true, this._enumerable);\r\n        // Or could use unfiltered for..in\r\n    }\r\n\r\n    static getOwnAndPrototypeNonenumerables(obj: any) {\r\n        return this._getPropertyNames(obj, true, true, this._notEnumerable);\r\n    }\r\n\r\n    static getOwnAndPrototypeEnumerablesAndNonenumerables(obj: any) {\r\n        return this._getPropertyNames(obj, true, true, this._enumerableAndNotEnumerable);\r\n    }\r\n\r\n    // Private static property checker callbacks\r\n    private static _enumerable(obj: any, prop: any): boolean {\r\n        return obj.propertyIsEnumerable(prop);\r\n    }\r\n\r\n    private static _notEnumerable(obj: any, prop: any): boolean {\r\n        return !obj.propertyIsEnumerable(prop);\r\n    }\r\n\r\n    private static _enumerableAndNotEnumerable(obj: any, prop: any): boolean {\r\n        return true;\r\n    }\r\n\r\n    private static _getPropertyNames(\r\n        obj: any, iterateSelfBool: boolean, iteratePrototypeBool: boolean, includePropCb: (obj: any, prop: any) => boolean):\r\n        Array<{ name: string; desc: PropDescriptor }> {\r\n\r\n        let result: Array<{ name: string; desc: PropDescriptor }> = [];\r\n\r\n        do {\r\n            if (iterateSelfBool) {\r\n\r\n                let props = Object.getOwnPropertyNames(obj);\r\n                for (let prop of props) {\r\n                    let duplicate = _.find(result, (p: { name: string; desc: PropDescriptor }) => p.name === prop);\r\n\r\n                    if (!duplicate && includePropCb(obj, prop)) {\r\n                        let propDesc = Object.getOwnPropertyDescriptor(obj, prop);\r\n                        result.push({ name: prop, desc: propDesc });\r\n                    }\r\n                };\r\n            }\r\n\r\n            if (!iteratePrototypeBool) {\r\n                break;\r\n            }\r\n\r\n            iterateSelfBool = true;\r\n\r\n        } while (obj = Object.getPrototypeOf(obj));\r\n\r\n        return result;\r\n    }\r\n\r\n}","export class Consts {\r\n    static readonly IMATCH_ID_VALUE = \"438A51D3-6864-49D7-A655-CA1153B86965\";\r\n    static readonly IMATCH_ID_NAME = \"___id\";\r\n    static readonly IMATCH_MATCHES_NAME = \"___matches\";\r\n\r\n    static readonly IPROXY_ID_VALUE = \"BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8\";\r\n    static readonly IPROXY_ID_NAME = \"___id\";\r\n}","import * as _ from \"lodash\";\r\nimport { Consts } from \"../Consts\";\r\n\r\nexport class Match {\r\n\r\n    static isMatcher(x: any): boolean {\r\n        return !_.isNil(x) &&\r\n            !_.isUndefined(x[Consts.IMATCH_MATCHES_NAME]) &&\r\n            !_.isUndefined(x[Consts.IMATCH_ID_NAME]) &&\r\n            x[Consts.IMATCH_ID_NAME] === Consts.IMATCH_ID_VALUE;\r\n    }\r\n\r\n}\r\n","import * as _ from \"lodash\";\r\nimport * as CircularJSON from \"circular-json\";\r\nimport { CtorWithArgs } from \"./Ctor\";\r\nimport { PropertyRetriever } from \"./PropertyRetriever\";\r\nimport { Match } from \"../Match/Match\";\r\n\r\nexport class Utils {\r\n\r\n    static functionName(fun: Object): string {\r\n        let res: string;\r\n        if ((<any>fun).name) {\r\n            res = (<any>fun).name;\r\n        } else {\r\n            let repr = fun.toString();\r\n            repr = repr.substr('function '.length);\r\n            res = repr.substr(0, repr.indexOf('('));\r\n        }\r\n        return res;\r\n    }\r\n\r\n    static objectName(obj: Object): string {\r\n        let res = Utils.functionName(obj.constructor);\r\n        return res;\r\n    }\r\n\r\n    static argsName(args: IArguments): string {\r\n        let argsArray: any[] = Array.prototype.slice.call(args);\r\n        let sargs = argsArray.map((x: any) => {\r\n            let res = \"\";\r\n            if (Match.isMatcher(x))\r\n                res = x.toString();\r\n            else\r\n                res = CircularJSON.stringify(x);\r\n            return res;\r\n        });\r\n        let res = _.join(sargs);\r\n        return res;\r\n    }\r\n\r\n    static conthunktor<U>(ctor: CtorWithArgs<U>, args: any[]): U {\r\n        let ret: U = new ctor(...args);\r\n        return ret;\r\n    }\r\n\r\n    static clone(target: Object, source: Object) {\r\n        let sourceProps = PropertyRetriever.getOwnAndPrototypeEnumerablesAndNonenumerables(source);\r\n        for (let p of sourceProps)\r\n            Object.defineProperty(target, p.name, p.desc);\r\n    }\r\n}","import * as _ from \"lodash\";\r\nimport * as common from \"../Common/_all\";\r\nimport { IMatch } from \"./IMatch\";\r\nimport { Consts } from \"../Consts\";\r\n\r\nexport class MatchAnyObject<T> implements IMatch {\r\n\r\n    readonly ___id = Consts.IMATCH_ID_VALUE;\r\n\r\n    constructor(private readonly _ctor: common.Ctor<T>) {\r\n    }\r\n\r\n    ___matches(object: Object): boolean {\r\n        let match = false;\r\n        if (object && object.constructor.prototype == this._ctor.prototype)\r\n            match = true;\r\n        return match;\r\n    }\r\n\r\n    toString(): string {\r\n        let res = `It.isAnyObject(${common.Utils.functionName(this._ctor)})`;\r\n        return res;\r\n    }\r\n}\r\n\r\nexport class MatchAny implements IMatch {\r\n\r\n    readonly ___id = Consts.IMATCH_ID_VALUE;\r\n\r\n    ___matches(object: Object): boolean {\r\n        let match = true;\r\n        return match;\r\n    }\r\n\r\n    toString(): string {\r\n        return `It.isAny()`;\r\n    }\r\n}\r\n\r\nexport class MatchAnyString implements IMatch {\r\n\r\n    readonly ___id = Consts.IMATCH_ID_VALUE;\r\n\r\n    ___matches(object: Object): boolean {\r\n        let match = false;\r\n        if (_.isString(object))\r\n            match = true;\r\n        return match;\r\n    }\r\n\r\n    toString(): string {\r\n        return `It.isAnyString()`;\r\n    }\r\n}\r\n\r\nexport class MatchAnyNumber implements IMatch {\r\n\r\n    readonly ___id = Consts.IMATCH_ID_VALUE;\r\n\r\n    ___matches(object: Object): boolean {\r\n        let match = false;\r\n        if (_.isNumber(object))\r\n            match = true;\r\n        return match;\r\n    }\r\n\r\n    toString(): string {\r\n        return `It.isAnyNumber()`;\r\n    }\r\n}","import * as common from \"../Common/_all\";\r\nimport { IMatch } from \"./IMatch\";\r\nimport { Consts } from \"../Consts\";\r\n\r\nexport class MatchPred<T> implements IMatch {\r\n\r\n    readonly ___id = Consts.IMATCH_ID_VALUE;\r\n\r\n    constructor(private readonly _pred: common.IFunc2<T, boolean>) {\r\n    }\r\n\r\n    ___matches(object: Object): boolean {\r\n        let match = false;\r\n        if (object && this._pred(<T>object))\r\n            match = true;\r\n        return match;\r\n    }\r\n\r\n    toString(): string {\r\n        let res = `It.is(${this._pred})`;\r\n        return res;\r\n    }\r\n}","import * as _ from \"lodash\";\r\nimport { IMatch } from \"./IMatch\";\r\nimport { Consts } from \"../Consts\";\r\nimport { Utils } from \"../Common/Utils\";\r\n\r\nexport class MatchValue<T> implements IMatch {\r\n\r\n    readonly ___id = Consts.IMATCH_ID_VALUE;\r\n\r\n    private readonly _value: T;\r\n\r\n    constructor(value: T) {\r\n        this._value = <any>_.cloneDeep(value);\r\n    }\r\n\r\n    ___matches(object: any): boolean {\r\n        let match = false;\r\n        if (_.isEqual(this._value, object))\r\n            match = true;\r\n        return match;\r\n    }\r\n\r\n    toString(): string {\r\n        let valueName = Utils.argsName(<any>[this._value]);\r\n        let res = `It.isValue(${valueName})`;\r\n        return res;\r\n    }\r\n}","import * as _ from \"lodash\";\r\nimport { IMatch } from \"./IMatch\";\r\nimport { Consts } from \"../Consts\";\r\nimport { Utils } from \"../Common/Utils\";\r\n\r\nexport class MatchObjectWith<T> implements IMatch {\r\n    \r\n    readonly ___id = Consts.IMATCH_ID_VALUE;\r\n    \r\n    private readonly _value: T;\r\n\r\n    constructor(value: T) {\r\n        this._value = <any>_.cloneDeep(value);\r\n    }\r\n\r\n    ___matches(object: Object): boolean {\r\n        let match = false;\r\n        let partial = _.pick(object, _.keys(this._value));\r\n        if (_.isEqual(this._value, partial))\r\n            match = true;\r\n        return match;\r\n    }\r\n\r\n    toString(): string {\r\n        let valueName = Utils.argsName(<any>[this._value]);\r\n        let res = `It.isObjectWith(${valueName})`;\r\n        return res;\r\n    }\r\n}\r\n","import { IPropertyInfo, InvocationType } from \"./Invocation\";\r\n\r\nexport enum CallType {\r\n    UNKNOWN, PROPERTY, FUNCTION\r\n}\r\n\r\nexport enum ProxyType {\r\n    STATIC, DYNAMIC\r\n}\r\n\r\nexport interface ICallContext {\r\n    args: IArguments;\r\n    property: IPropertyInfo;\r\n    returnValue: any;\r\n    invokeBase(): void;\r\n    invocationType: InvocationType;\r\n    callType: CallType;\r\n    proxyType: ProxyType;\r\n    isAnUnknownDynamicCallAtExecution: boolean;\r\n}\r\n","import * as _ from \"lodash\";\r\nimport * as common from \"../Common/_all\";\r\nimport { ICallContext, CallType, ProxyType } from \"./ICallContext\";\r\n\r\nexport enum InvocationType {\r\n    NONE, SETUP, EXECUTE\r\n}\r\n\r\nexport abstract class BaseInvocation implements ICallContext {\r\n    returnValue: any;\r\n    invocationType = InvocationType.NONE;\r\n\r\n    constructor(public readonly proxyType: ProxyType, public callType: CallType) {\r\n    }\r\n\r\n    abstract get args(): IArguments;\r\n    abstract set args(value: IArguments);\r\n\r\n    abstract get property(): IPropertyInfo;\r\n\r\n    abstract invokeBase(): void;\r\n\r\n    get isAnUnknownDynamicCallAtExecution(): boolean {\r\n        return this.proxyType == ProxyType.DYNAMIC &&\r\n            this.callType == CallType.UNKNOWN &&\r\n            this.invocationType == InvocationType.EXECUTE;\r\n    };\r\n}\r\n\r\nexport class MethodInvocation extends BaseInvocation {\r\n    private _args: IArguments;\r\n\r\n    constructor(\r\n        private readonly _that: Object,\r\n        private readonly _property: MethodInfo,\r\n        args?: IArguments,\r\n        proxyType = ProxyType.STATIC,\r\n        callType = CallType.FUNCTION) {\r\n\r\n        super(proxyType, callType);\r\n\r\n        if (args) {\r\n            this._args = <any>_.cloneDeep(args);\r\n            this._args.length = args.length;\r\n            this._args.callee = args.callee;\r\n        }\r\n    }\r\n\r\n    get args(): IArguments { return this._args || <any>{ length: 0, callee: null }; }\r\n    set args(value: IArguments) { this._args = value; }\r\n\r\n    get property(): IPropertyInfo { return this._property; }\r\n\r\n    invokeBase(): void {\r\n        let thatClone = {};\r\n        if (this._that)\r\n            common.Utils.clone(thatClone, this._that);\r\n        else\r\n            thatClone = this._property.obj;\r\n        this.returnValue = this._property.toFunc.apply(thatClone, this._args);\r\n    }\r\n\r\n    toString(): string {\r\n        let res = `${this.property}(${common.Utils.argsName(this.args)})`;\r\n        return res;\r\n    }\r\n}\r\n\r\nexport class ValueGetterInvocation extends BaseInvocation {\r\n    constructor(\r\n        private readonly _property: IPropertyInfo,\r\n        readonly value: any,\r\n        proxyType = ProxyType.STATIC,\r\n        callType = CallType.PROPERTY) {\r\n            \r\n        super(proxyType, callType);\r\n\r\n        this.returnValue = _.cloneDeep(value);\r\n    }\r\n\r\n    get args(): IArguments {\r\n        let args: any[] = [];\r\n        Object.defineProperty(args, \"callee\",\r\n            { configurable: true, enumerable: true, writable: false, value: null });\r\n        return <any>args;\r\n    }\r\n    set args(value: IArguments) { }\r\n\r\n    get property(): IPropertyInfo { return this._property; }\r\n\r\n    invokeBase(): void {\r\n        this.returnValue = (<any>this._property.obj)[this._property.name];\r\n    }\r\n\r\n    toString(): string {\r\n        let res = `${this.property}`;\r\n        return res;\r\n    }\r\n}\r\n\r\nexport class DynamicGetInvocation extends ValueGetterInvocation {\r\n    constructor(\r\n        property: IPropertyInfo,\r\n        value: any) {\r\n\r\n        super(property, value, ProxyType.DYNAMIC, CallType.UNKNOWN);\r\n\r\n        this.returnValue = _.cloneDeep(value);\r\n    }\r\n}\r\n\r\nexport class ValueSetterInvocation extends BaseInvocation {\r\n    private _args: IArguments;\r\n\r\n    constructor(\r\n        private readonly _property: IPropertyInfo,\r\n        args: IArguments,\r\n        proxyType = ProxyType.STATIC,\r\n        callType = CallType.PROPERTY) {\r\n\r\n        super(proxyType, callType);\r\n\r\n        this._args = <any>_.cloneDeep(args);\r\n        this._args.length = args.length;\r\n        this._args.callee = args.callee;\r\n    }\r\n\r\n    get args(): IArguments { return this._args; }\r\n    set args(value: IArguments) { this._args = value; }\r\n\r\n    get property(): IPropertyInfo { return this._property; }\r\n\r\n    invokeBase(): void {\r\n        (<any>this._property.obj)[this._property.name] = this._args[0];\r\n        this.returnValue = (<any>this._property.obj)[this._property.name];\r\n    }\r\n\r\n    toString(): string {\r\n        let res = `${this.property} = ${common.Utils.argsName(this.args[0])}`;\r\n        return res;\r\n    }\r\n}\r\n\r\nexport class MethodGetterInvocation extends BaseInvocation {\r\n    constructor(\r\n        private readonly _property: IPropertyInfo,\r\n        private readonly _getter: () => any,\r\n        proxyType = ProxyType.STATIC,\r\n        callType = CallType.FUNCTION) {\r\n\r\n        super(proxyType, callType);\r\n    }\r\n\r\n    get args(): IArguments {\r\n        let args: any[] = [];\r\n        Object.defineProperty(args, \"callee\",\r\n            { configurable: true, enumerable: true, writable: false, value: null });\r\n        return <any>args;\r\n    }\r\n    set args(value: IArguments) { }\r\n\r\n    get property(): IPropertyInfo { return this._property; }\r\n\r\n    invokeBase(): void {\r\n        this.returnValue = (<any>this._property.obj)[this._property.name];\r\n    }\r\n\r\n    toString(): string {\r\n        let res = `${this.property}`;\r\n        return res;\r\n    }\r\n}\r\n\r\nexport class MethodSetterInvocation extends BaseInvocation {\r\n    private _args: IArguments;\r\n\r\n    constructor(\r\n        private readonly _property: IPropertyInfo,\r\n        private readonly _setter: (v: any) => void,\r\n        args: IArguments,\r\n        proxyType = ProxyType.STATIC,\r\n        callType = CallType.FUNCTION) {\r\n\r\n        super(proxyType, callType);\r\n\r\n        this._args = <any>_.cloneDeep(args);\r\n        this._args.length = args.length;\r\n        this._args.callee = args.callee;\r\n    }\r\n\r\n    get args(): IArguments { return this._args; }\r\n    set args(value: IArguments) { this._args = value; }\r\n\r\n    get property(): IPropertyInfo { return this._property; }\r\n\r\n    invokeBase(): void {\r\n        (<any>this._property.obj)[this._property.name] = this._args[0];\r\n        this.returnValue = (<any>this._property.obj)[this._property.name];\r\n    }\r\n\r\n    toString(): string {\r\n        let res = `${this.property}(${common.Utils.argsName(this.args[0])})`;\r\n        return res;\r\n    }\r\n}\r\n\r\nexport class MethodInfo implements IPropertyInfo {\r\n    readonly desc: common.PropDescriptor;\r\n\r\n    constructor(\r\n        public readonly obj: any,\r\n        public readonly name: string,\r\n        desc?: common.PropDescriptor) {\r\n\r\n        if (desc)\r\n            this.desc = _.cloneDeep(desc);\r\n    }\r\n\r\n    get toFunc(): Function {\r\n        let func: Function;\r\n        if (_.isFunction(this.obj))\r\n            func = <Function>this.obj;\r\n        else\r\n            func = <Function>this.obj[this.name];\r\n        return func;\r\n    }\r\n\r\n    toString(): string {\r\n        let objName = common.Utils.objectName(this.obj);\r\n        let res = `${objName}.${this.name}`;\r\n        return res;\r\n    }\r\n}\r\n\r\nexport class PropertyInfo implements IPropertyInfo {\r\n    readonly desc: common.PropDescriptor;\r\n\r\n    constructor(\r\n        public readonly obj: Object,\r\n        public readonly name: string,\r\n        desc?: common.PropDescriptor) {\r\n\r\n        if (desc)\r\n            this.desc = _.cloneDeep(desc);\r\n    }\r\n\r\n    toString(): string {\r\n        let objName = common.Utils.objectName(this.obj);\r\n        let res = `${objName}.${this.name}`;\r\n        return res;\r\n    }\r\n}\r\n\r\nexport interface IPropertyInfo {\r\n    obj: Object;\r\n    name: string;\r\n    desc?: common.PropDescriptor;\r\n}\r\n","import * as _ from \"lodash\";\r\nimport * as common from \"../Common/_all\";\r\nimport * as error from \"../Error/_all\";\r\nimport { Consts } from \"../Consts\";\r\nimport { IProxy } from \"./IProxy\";\r\nimport { ICallContext } from \"./ICallContext\";\r\nimport { ICallInterceptor } from \"./ICallInterceptor\";\r\nimport { PropertyInfo, MethodInfo, MethodInvocation, MethodGetterInvocation, MethodSetterInvocation, ValueGetterInvocation, ValueSetterInvocation } from \"./Invocation\";\r\n\r\nexport class ProxyES5<T> implements IProxy {\r\n\r\n    readonly ___id = Consts.IPROXY_ID_VALUE;\r\n\r\n    private constructor(target: T, interceptor: ICallInterceptor) {\r\n        this.check(target);\r\n        let that = this;\r\n\r\n        let props = common.PropertyRetriever.getOwnAndPrototypeEnumerablesAndNonenumerables(target);\r\n        _.each(props, (prop: { name: string; desc: common.PropDescriptor }) => {\r\n\r\n            if (_.isFunction(prop.desc.value)) {\r\n                let propDesc: common.PropDescriptor = {\r\n                    configurable: prop.desc.configurable,\r\n                    enumerable: prop.desc.enumerable,\r\n                    writable: prop.desc.writable\r\n                };\r\n\r\n                this.defineMethodProxy(that, interceptor, target, prop.name, propDesc);\r\n            }\r\n            else {\r\n                let propDesc: common.PropDescriptor = {\r\n                    configurable: prop.desc.configurable,\r\n                    enumerable: prop.desc.enumerable\r\n                };\r\n\r\n                if (prop.desc.value !== undefined)\r\n                    this.defineValuePropertyProxy(that, interceptor, target, prop.name, prop.desc.value, propDesc);\r\n                else\r\n                    this.defineGetSetPropertyProxy(that, interceptor, target, prop.name, prop.desc.get, prop.desc.set, propDesc);\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    static of<U>(target: U, interceptor: ICallInterceptor): ProxyES5<U> {\r\n        ProxyES5.check(target);\r\n\r\n        let result: any;\r\n\r\n        if (_.isFunction(target)) {\r\n            let funcName = common.Utils.functionName(target);\r\n            result = ProxyES5.methodProxyValue(undefined, interceptor, target, funcName, null);\r\n        }\r\n        else {\r\n            result = new ProxyES5(target, interceptor);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static isProxy(obj: any): boolean {\r\n        if (!_.isNil(obj) &&\r\n            !_.isUndefined(obj[Consts.IPROXY_ID_NAME]) && obj[Consts.IPROXY_ID_NAME] === Consts.IPROXY_ID_VALUE)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    private static check<U>(target: U): void {\r\n        ProxyES5.checkNotNullOrUndefined(target);\r\n\r\n        // allow only primitive objects and functions\r\n        let ok = false;\r\n        if (_.isFunction(target) ||\r\n            (_.isObject(target) && !ProxyES5.isPrimitiveObject(target)))\r\n            ok = true;\r\n\r\n        if (!ok)\r\n            throw new error.MockException(error.MockExceptionReason.InvalidArg,\r\n                target, `'${target}'; proxy argument should be a function or a non primitive object`);\r\n    }\r\n\r\n    private check<U>(target: U): void {\r\n        ProxyES5.checkNotNullOrUndefined(target);\r\n\r\n        // allow only non primitive objects\r\n        let ok = false;\r\n        if (!_.isFunction(target) &&\r\n            (_.isObject(target) && !ProxyES5.isPrimitiveObject(target)))\r\n            ok = true;\r\n\r\n        if (!ok)\r\n            throw new error.MockException(error.MockExceptionReason.InvalidArg,\r\n                target, `'${target}'; proxy argument should be a non primitive object`);\r\n    }\r\n\r\n    private static checkNotNullOrUndefined<U>(instance: U): void {\r\n        if (_.isNil(instance))\r\n            throw new error.MockException(error.MockExceptionReason.InvalidArg,\r\n                instance, `'${instance}'; proxy argument is required`);\r\n    }\r\n\r\n    private static isPrimitiveObject(obj: Object): boolean {\r\n        let result = false;\r\n\r\n        if (_.isFunction(obj) ||\r\n            _.isArray(obj) ||\r\n            _.isDate(obj) ||\r\n            _.isNull(obj))\r\n            result = true;\r\n\r\n        return result;\r\n    }\r\n\r\n    private defineMethodProxy(\r\n        that: Object,\r\n        interceptor: ICallInterceptor,\r\n        target: T,\r\n        propName: string,\r\n        propDesc: common.PropDescriptor = { configurable: true, enumerable: true, writable: false }) {\r\n\r\n        propDesc.value = ProxyES5.methodProxyValue(that, interceptor, target, propName, propDesc);\r\n\r\n        this.defineProperty(that, propName, propDesc);\r\n    }\r\n\r\n    private static methodProxyValue<U>(\r\n        that: Object,\r\n        interceptor: ICallInterceptor,\r\n        target: U,\r\n        propName: string,\r\n        propDesc: common.PropDescriptor): () => any {\r\n\r\n        function proxy() {\r\n            let method = new MethodInfo(target, propName, propDesc);\r\n            let invocation: ICallContext = new MethodInvocation(that, method, arguments);\r\n            interceptor.intercept(invocation);\r\n            return invocation.returnValue;\r\n        }\r\n        return proxy;\r\n    }\r\n\r\n    private defineValuePropertyProxy(\r\n        that: Object,\r\n        interceptor: ICallInterceptor,\r\n        target: T,\r\n        propName: string,\r\n        propValue: any,\r\n        propDesc: common.PropDescriptor = { configurable: true, enumerable: true }) {\r\n\r\n        function getProxy(): any {\r\n            let method = new PropertyInfo(target, propName);\r\n            let invocation: ICallContext = new ValueGetterInvocation(method, propValue);\r\n            interceptor.intercept(invocation);\r\n            return invocation.returnValue;\r\n        }\r\n        propDesc.get = getProxy;\r\n\r\n        function setProxy(v: any): void {\r\n            let method = new PropertyInfo(target, propName);\r\n            let invocation: ICallContext = new ValueSetterInvocation(method, arguments);\r\n            interceptor.intercept(invocation);\r\n        }\r\n        propDesc.set = setProxy;\r\n\r\n        this.defineProperty(that, propName, propDesc);\r\n    }\r\n\r\n    private defineGetSetPropertyProxy(\r\n        that: Object,\r\n        interceptor: ICallInterceptor,\r\n        target: T,\r\n        propName: string,\r\n        get?: () => any,\r\n        set?: (v: any) => void,\r\n        propDesc: common.PropDescriptor = { configurable: true, enumerable: true }) {\r\n\r\n        function getProxy(): any {\r\n            let method = new PropertyInfo(target, propName);\r\n            let invocation: ICallContext = new MethodGetterInvocation(method, get);\r\n            interceptor.intercept(invocation);\r\n            return invocation.returnValue;\r\n        }\r\n        propDesc.get = getProxy;\r\n\r\n        function setProxy(v: any): void {\r\n            let method = new PropertyInfo(target, propName);\r\n            let invocation: ICallContext = new MethodSetterInvocation(method, set, arguments);\r\n            interceptor.intercept(invocation);\r\n        }\r\n        propDesc.set = setProxy;\r\n\r\n        this.defineProperty(that, propName, propDesc);\r\n    }\r\n\r\n    private defineProperty(obj: Object, name: string, desc: common.PropDescriptor) {\r\n        try {\r\n            Object.defineProperty(obj, name, desc);\r\n        }\r\n        catch (e) {\r\n            console.log(e.message);\r\n        }\r\n    }\r\n}","///<reference path=\"../../node_modules/typescript/lib/lib.es6.d.ts\"/>\r\nimport * as error from \"../Error/_all\";\r\nimport { Consts } from \"../Consts\";\r\nimport { IProxy } from \"./IProxy\";\r\nimport { IProxyHandler, PropKey } from \"./IProxyHandler\";\r\n\r\nexport class ProxyES6<T> implements IProxy {\r\n\r\n    readonly ___id = Consts.IPROXY_ID_VALUE;\r\n\r\n    private constructor(target: T, handler: IProxyHandler<T>) {\r\n        let p = <ProxyES6<T>>new Proxy(<Object>target, handler);\r\n        return p;\r\n    }\r\n\r\n    static of<U>(target: U, handler: IProxyHandler<U>): ProxyES6<U> {\r\n        ProxyES6.check();\r\n        let result = new ProxyES6(target, handler);\r\n        return result;\r\n    }\r\n    \r\n    private static check(): void {\r\n        if (typeof Proxy === \"undefined\")\r\n            throw new error.MockException(error.MockExceptionReason.InvalidDynamicProxyRuntime,\r\n                null, \"ES6 Proxy object not detected; the dynamic mocking feature requires ES6 Proxy object support\");\r\n    }\r\n}\r\n","import * as _ from \"lodash\";\r\nimport * as common from \"../Common/_all\";\r\nimport { ICallContext, ProxyType, CallType } from \"./ICallContext\";\r\nimport { ICallInterceptor } from \"./ICallInterceptor\";\r\nimport * as inv from \"./Invocation\";\r\nimport { IProxyHandler, PropKey } from \"./IProxyHandler\";\r\n\r\nexport class ProxyES6Handler<T> implements IProxyHandler<T> {\r\n\r\n    constructor(private readonly _interceptor: ICallInterceptor) {\r\n    }\r\n\r\n    apply(target: T, thisArg: any, argArray?: any): any {\r\n\r\n        let funcName = common.Utils.functionName(target);\r\n        let method = new inv.MethodInfo(target, funcName);\r\n        let invocation: ICallContext = new inv.MethodInvocation(target, method, argArray, ProxyType.DYNAMIC);\r\n        this._interceptor.intercept(invocation);\r\n\r\n        return invocation.returnValue;\r\n    }\r\n\r\n    get(target: T, p: PropKey, receiver: any): any {\r\n\r\n        let propValue = (<any>target)[p];\r\n        let method = new inv.PropertyInfo(target, <string>p);\r\n        let invocation = new inv.DynamicGetInvocation(method, propValue);\r\n        \r\n        this._interceptor.intercept(invocation);\r\n\r\n        if (!_.isFunction(propValue) && \r\n            invocation.callType == CallType.PROPERTY &&\r\n            invocation.property.desc) // value getter invocation at execution time\r\n            \r\n            return invocation.returnValue;\r\n        else\r\n            return (...args: any[]) => {\r\n\r\n                this._interceptor.removeInvocation(invocation);\r\n\r\n                let method = new inv.MethodInfo(target, <string>p);\r\n                let methodInvocation = new inv.MethodInvocation(target, method, <any>args, ProxyType.DYNAMIC);\r\n                this._interceptor.intercept(methodInvocation);\r\n\r\n                return methodInvocation.returnValue;\r\n            }\r\n    }\r\n\r\n    set(target: T, p: PropKey, value: any, receiver: any): boolean {\r\n\r\n        let method = new inv.PropertyInfo(target, <string>p);\r\n        let invocation: ICallContext = new inv.ValueSetterInvocation(method, <any>[value], ProxyType.DYNAMIC);\r\n        this._interceptor.intercept(invocation);\r\n\r\n        return Reflect.set(<Object>target, p, value, receiver);\r\n    }\r\n\r\n    defineProperty(target: T, p: PropKey, attributes: common.PropDescriptor): boolean {\r\n        \r\n        attributes.configurable = true;\r\n        \r\n        return Reflect.defineProperty(<Object>target, p, attributes);\r\n    }\r\n\r\n}\r\n","import { ICallInterceptor } from \"./ICallInterceptor\";\r\nimport { ProxyES5 } from \"./ProxyES5\";\r\nimport { ProxyES6 } from \"./ProxyES6\";\r\nimport { ProxyES6Handler } from \"./ProxyES6Handler\";\r\n\r\nexport class ProxyFactory {\r\n    \r\n    static createProxy<T>(target: T, interceptor: ICallInterceptor): T {\r\n        let proxy: T = <T><any>ProxyES5.of(target, interceptor);\r\n        return proxy;\r\n    }\r\n\r\n    static createProxyES6<T>(target: T, interceptor: ICallInterceptor): T {\r\n        let proxyHandler: ProxyES6Handler<T> = new ProxyES6Handler(interceptor);\r\n        let proxy: T = <T><any>ProxyES6.of(target, proxyHandler);\r\n        return proxy;\r\n    }\r\n}","import * as _ from \"lodash\";\r\nimport * as all from \"./_all\";\r\nimport { InterceptorExecute } from \"./InterceptorExecute\";\r\nimport { MethodCall } from \"./MethodCall\";\r\nimport { MethodCallReturn } from \"./MethodCallReturn\";\r\n\r\nexport abstract class MockBase<T> implements all.IMock<T> {\r\n\r\n    private _id: string;\r\n    protected _name: string;\r\n    protected _interceptor: InterceptorExecute<T>;\r\n    protected _proxy: T;\r\n    private _callBase: boolean;\r\n\r\n    constructor(\r\n        public readonly target: T,\r\n        public readonly canOverrideTarget: boolean,\r\n        public readonly behavior: all.MockBehavior = all.MockBehavior.Loose) {\r\n        \r\n        this._id = this.generateId();\r\n        this._name = this.getNameOf(this.target);\r\n    }\r\n\r\n    get object() { return this._proxy; }\r\n    get name() { return this._name; }\r\n\r\n    get callBase() { return this._callBase; }\r\n    set callBase(value: boolean) { this._callBase = value; }\r\n\r\n    private generateId() {\r\n        return \"Mock<\" + _.uniqueId() + \">\";\r\n    }\r\n\r\n    private getNameOf(instance: T): string {\r\n        let result: string;\r\n\r\n        if (_.isFunction(instance)) {\r\n            result = all.Utils.functionName(instance);\r\n        }\r\n        else if (_.isObject(instance)) {\r\n            let ctor = instance.constructor;\r\n            result = all.Utils.functionName(ctor);\r\n        }\r\n\r\n        if (result)\r\n            result = result.trim();\r\n\r\n        return result;\r\n    }\r\n\r\n    // setup\r\n\r\n    abstract setup<TResult>(expression: all.IFunc2<T, TResult>): MethodCallReturn<T, TResult>;\r\n\r\n    // verify\r\n\r\n    abstract verify<TResult>(expression: all.IFunc2<T, TResult>, times: all.Times): void;\r\n\r\n    verifyAll(): void {\r\n        try {\r\n            this._interceptor.verify();\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    // reset\r\n\r\n    reset(): void {\r\n        this._interceptor.reset();\r\n    }\r\n\r\n}","import * as _ from \"lodash\";\r\nimport * as all from \"./_all\";\r\nimport { CurrentInterceptContext } from \"./CurrentInterceptContext\";\r\n\r\nexport enum InterceptionAction { Continue, Stop }\r\n\r\nexport interface IInterceptStrategy<T> {\r\n\thandleIntercept(invocation: all.ICallContext, ctx: InterceptorContext<T>, localCtx: CurrentInterceptContext<T>): InterceptionAction;\r\n}\r\n\r\nexport class InterceptorContext<T> {\r\n\tprivate _actualInvocations: Array<all.ICallContext> = [];\r\n\tprivate _expectedCalls: Array<all.IProxyCall<T>> = [];\r\n\r\n\tconstructor(public mock: all.IMock<T>) { }\r\n\r\n\tget behavior(): all.MockBehavior { return this.mock.behavior; } \r\n\r\n\taddInvocation(invocation: all.ICallContext) { this._actualInvocations.push(invocation); }\r\n\tremoveInvocation(invocation: all.ICallContext) {\r\n\t\t_.remove(this._actualInvocations, (x: all.ICallContext): boolean => {\r\n\t\t\treturn x === invocation;\r\n\t\t});\r\n\t}\r\n\tactualInvocations(): all.ICallContext[] { return this._actualInvocations; }\r\n\tprivate clearInvocations() { this._actualInvocations.splice(0, this._actualInvocations.length); }\r\n\r\n\taddExpectedCall(call: all.IProxyCall<T>) { this._expectedCalls.push(call); }\r\n\tremoveExpectedCall(call: all.IProxyCall<T>) {\r\n\t\t_.filter(this._expectedCalls, (x: all.IProxyCall<T>): boolean => {\r\n\t\t\treturn x.id !== call.id;\r\n\t\t});\r\n\t}\r\n\texpectedCalls(): all.IProxyCall<T>[] { return this._expectedCalls; }\r\n\tprivate clearExpectedCalls() { this._expectedCalls.splice(0, this._expectedCalls.length); }\r\n\t\r\n\treset(): void {\r\n\t\tthis.clearInvocations();\r\n\t\tthis.clearExpectedCalls();\r\n\t}\r\n}","import * as all from \"./_all\";\r\n\r\nexport class CurrentInterceptContext<T> {\r\n    call: all.IProxyCall<T>;\r\n}","import * as _ from \"lodash\";\r\nimport * as all from \"./_all\";\r\nimport { InterceptorContext, IInterceptStrategy, InterceptionAction } from \"./InterceptorContext\";\r\nimport { CurrentInterceptContext } from \"./CurrentInterceptContext\";\r\n\r\nexport class AddActualInvocation<T> implements IInterceptStrategy<T> {\r\n\r\n    handleIntercept(invocation: all.ICallContext, ctx: InterceptorContext<T>, localCtx: CurrentInterceptContext<T>): InterceptionAction {\r\n        ctx.addInvocation(invocation);\r\n        return InterceptionAction.Continue;\r\n    }\r\n}\r\n\r\nexport class ExtractProxyCall<T> implements IInterceptStrategy<T> {\r\n\r\n    handleIntercept(invocation: all.ICallContext, ctx: InterceptorContext<T>, localCtx: CurrentInterceptContext<T>): InterceptionAction {\r\n        let expectedCalls = ctx.expectedCalls().slice();\r\n\r\n        let findCallPred = <T>(c: all.IProxyCall<T>) => c.matches(invocation);\r\n\r\n        let matchingCalls = _.filter(expectedCalls, (c: all.IProxyCall<T>) => {\r\n            return findCallPred(c);\r\n        });\r\n\r\n        if (matchingCalls.length > 1)   // record/replay scenario \r\n            findCallPred = <T>(c: all.IProxyCall<T>) => !c.isInvoked &&\r\n                c.matches(invocation);\r\n\r\n        localCtx.call = _.find(expectedCalls, (c: all.IProxyCall<T>) => {\r\n            return findCallPred(c);\r\n        });\r\n        \r\n        if (localCtx.call != null) {\r\n            // determine call type for dynamic mock at execution\r\n            if (invocation.isAnUnknownDynamicCallAtExecution) {\r\n                \r\n                invocation.callType = localCtx.call.setupCall.callType;\r\n                \r\n                if (invocation.callType == all.CallType.FUNCTION)\r\n                    return InterceptionAction.Stop; // avoid executing twice any existing setups\r\n            }\r\n\r\n            localCtx.call.evaluatedSuccessfully();\r\n        }\r\n        else if (ctx.behavior == all.MockBehavior.Strict)\r\n                throw new all.MockException(all.MockExceptionReason.NoSetup, invocation, `'${invocation}'`);\r\n\r\n        return InterceptionAction.Continue;\r\n    }\r\n}\r\n\r\nexport class ExecuteCall<T> implements IInterceptStrategy<T> {\r\n\r\n    private _ctx: InterceptorContext<T>;\r\n\r\n    handleIntercept(invocation: all.ICallContext, ctx: InterceptorContext<T>, localCtx: CurrentInterceptContext<T>): InterceptionAction {\r\n        this._ctx = ctx;\r\n        let currentCall = localCtx.call;\r\n\r\n        if (currentCall != null) {\r\n            currentCall.execute(invocation);\r\n            return InterceptionAction.Stop;\r\n        }\r\n\r\n        return InterceptionAction.Continue;\r\n    }\r\n\r\n}\r\n\r\nexport class InvokeBase<T> implements IInterceptStrategy<T> {\r\n\r\n    handleIntercept(invocation: all.ICallContext, ctx: InterceptorContext<T>, localCtx: CurrentInterceptContext<T>): InterceptionAction {\r\n        if (ctx.mock.callBase) {\r\n            invocation.invokeBase();\r\n            return InterceptionAction.Stop;\r\n        }\r\n        return InterceptionAction.Continue;\r\n    }\r\n}\r\n\r\nexport class HandleMockRecursion<T> implements IInterceptStrategy<T> {\r\n\r\n    handleIntercept(invocation: all.ICallContext, ctx: InterceptorContext<T>, localCtx: CurrentInterceptContext<T>): InterceptionAction {\r\n        //TODO: \r\n        return InterceptionAction.Continue;\r\n    }\r\n}","import * as _ from \"lodash\";\r\nimport * as all from \"./_all\";\r\nimport { InterceptorContext, IInterceptStrategy, InterceptionAction } from \"./InterceptorContext\";\r\nimport { CurrentInterceptContext } from \"./CurrentInterceptContext\";\r\nimport * as strategy from \"./InterceptorStrategies\";\r\n\r\nexport class InterceptorExecute<T> implements all.ICallInterceptor {\r\n    private _interceptorContext: InterceptorContext<T>;\r\n\r\n    constructor(mock: all.IMock<T>) {\r\n        this._interceptorContext = new InterceptorContext(mock);\r\n    }\r\n\r\n    get interceptorContext(): InterceptorContext<T> { return this._interceptorContext; }\r\n\r\n    intercept(invocation: all.ICallContext) {\r\n        let localCtx = new CurrentInterceptContext();\r\n\r\n        invocation.invocationType = all.InvocationType.EXECUTE;\r\n\r\n        _.some(this.interceptionStrategies(), (strategy: IInterceptStrategy<T>) => {\r\n            if (InterceptionAction.Stop === strategy.handleIntercept(invocation, this.interceptorContext, localCtx)) {\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    removeInvocation(invocation: all.ICallContext) {\r\n        this._interceptorContext.removeInvocation(invocation);\r\n    }\r\n\r\n    addExpectedCall(call: all.IProxyCall<T>): void {\r\n        this._interceptorContext.addExpectedCall(call);\r\n    }\r\n\r\n    verify(): void {\r\n        let expectedCalls = this._interceptorContext.expectedCalls();\r\n\r\n        let verifiableCalls: Array<all.IProxyCall<T>> = [];\r\n        if (this._interceptorContext.behavior == all.MockBehavior.Strict) { // verifiable by default when strict mocking\r\n            for (let call of expectedCalls) {\r\n                if (!call.isVerifiable)\r\n                    call.setVerifiable();\r\n                verifiableCalls.push(call);\r\n            }\r\n        }\r\n        else {\r\n            verifiableCalls = _.filter(expectedCalls, (c: all.IProxyCall<T>) => c.isVerifiable);\r\n        }\r\n        for (let v of verifiableCalls)\r\n            this.verifyCallCount(v, v.expectedCallCount);\r\n\r\n        let orderedCalls: Array<all.IProxyCall<T>> = _.filter(expectedCalls, (c: all.IProxyCall<T>) => c.isInSequence);\r\n        this.verifyCallsOrder(orderedCalls);\r\n    }\r\n\r\n    verifyCallCount<T>(call: all.IProxyCall<T>, times: all.Times): void {\r\n        let expectedCalls = this._interceptorContext.expectedCalls();\r\n        let actualCalls = this._interceptorContext.actualInvocations();\r\n\r\n        let callCount: number = _.filter(actualCalls, (c: all.ICallContext) => call.matches(c)).length;\r\n\r\n        if (!times.verify(callCount))\r\n            this.throwVerifyCallCountException(call.setupCall, times, expectedCalls, actualCalls);\r\n    }\r\n\r\n    private throwVerifyCallCountException(setupCall: all.ICallContext, times: all.Times,\r\n        expectedCalls: Array<all.IProxyCall<T>>, actualCalls: Array<all.ICallContext>) {\r\n\r\n        let failMsg = times.failMessage(setupCall);\r\n        let expectedCallsMsg = expectedCalls.reduce((a, x) => `${a} ${x}\\n`, \"\");\r\n        let actualCallsMsg = actualCalls.reduce((a, x) => `${a} ${x}\\n`, \"\");\r\n        let msg = `${failMsg}\\n Configured setups:\\n${expectedCallsMsg}\\n Performed invocations:\\n${actualCallsMsg}`;\r\n\r\n        let e = new all.MockException(all.MockExceptionReason.CallCountVerificationFailed, setupCall, msg);\r\n        throw e;\r\n    }\r\n\r\n    private verifyCallsOrder<T>(expectedCalls: Array<all.IProxyCall<T>>): void {\r\n        let actualCalls = this._interceptorContext.actualInvocations();\r\n\r\n        this.checkCallOrderExpectations(expectedCalls, actualCalls);\r\n    }\r\n\r\n    private checkCallOrderExpectations<T>(expectedCalls: Array<all.IProxyCall<T>>, actualCalls: Array<all.ICallContext>): void {\r\n        let checkOrder = (expectedCallCountList: Array<number>): boolean => {\r\n            let expectedCallCount = _.sum(expectedCallCountList);\r\n            let aci = 0;\r\n            for (let eci = 0; eci < expectedCallCountList.length; eci++) {\r\n                let expectedCall = expectedCalls[eci];\r\n                let expectedCallCount = expectedCallCountList[eci];\r\n                for (let count = 1; count <= expectedCallCount; count++) {\r\n                    let actualCall = actualCalls[aci++];\r\n                    if (!expectedCall.matches(actualCall))\r\n                        return false;\r\n                }\r\n            }\r\n            return aci === expectedCallCount;\r\n        }\r\n\r\n        let eureka = false;\r\n        let execute = (acc: Array<number>, i: number) => {\r\n            if (!eureka) {\r\n                if (i === expectedCalls.length)\r\n                    eureka = checkOrder(acc);\r\n                else\r\n                    for (let j = expectedCalls[i].expectedCallCount.min; j <= expectedCalls[i].expectedCallCount.max; j++) {\r\n                        acc[i] = j;\r\n                        execute(acc, i + 1);\r\n                    }\r\n            }\r\n        }\r\n        execute([], 0);\r\n\r\n        if (!eureka)\r\n            this.throwVerifyCallOrderException();\r\n    }\r\n\r\n    private throwVerifyCallOrderException() {\r\n        let e = new all.MockException(all.MockExceptionReason.CallOrderVerificationFailed, null);\r\n        throw e;\r\n    }\r\n\r\n    reset(): void {\r\n        this._interceptorContext.reset();\r\n    }\r\n\r\n    private interceptionStrategies(): _.List<IInterceptStrategy<T>> {\r\n        let strategies: _.List<IInterceptStrategy<T>> = [\r\n            new strategy.AddActualInvocation(),\r\n            new strategy.ExtractProxyCall(),\r\n            new strategy.ExecuteCall(),\r\n            new strategy.InvokeBase(),\r\n            new strategy.HandleMockRecursion()\r\n        ];\r\n        return strategies;\r\n    }\r\n\r\n}","import * as all from \"./_all\";\r\n\r\nexport class InterceptorSetup<T> implements all.ICallInterceptor {\r\n    private _interceptedCall: all.ICallContext;\r\n\r\n    get interceptedCall(): all.ICallContext { return this._interceptedCall; }\r\n\r\n    intercept(invocation: all.ICallContext) {\r\n        invocation.invocationType = all.InvocationType.SETUP;\r\n        \r\n        if (invocation.proxyType == all.ProxyType.DYNAMIC &&\r\n            invocation.callType == all.CallType.UNKNOWN)\r\n            invocation.callType = all.CallType.PROPERTY;\r\n\r\n        if (this._interceptedCall) {\r\n            throw new all.MockException(all.MockExceptionReason.MoreThanOneSetup,\r\n                invocation, `'${invocation}'; setup should contain only one expression`);\r\n        }\r\n\r\n        this._interceptedCall = invocation;\r\n    }\r\n\r\n    removeInvocation(invocation: all.ICallContext) {\r\n        if(this._interceptedCall && \r\n            this._interceptedCall === invocation)\r\n                this._interceptedCall = undefined;\r\n    }\r\n}","import * as _ from \"lodash\";\r\nimport * as all from \"./_all\";\r\nimport { MockBase } from \"./MockBase\";\r\nimport { InterceptorSetup } from \"./InterceptorSetup\";\r\nimport { Consts } from \"./Consts\";\r\n\r\nexport class MethodCall<T, TResult> implements all.IProxyCall<T>, all.IVerifies {\r\n\r\n    protected _id: string;\r\n    protected _setupCall: all.ICallContext;\r\n    protected _setupCallback: all.IAction;\r\n    protected _isVerifiable: boolean;\r\n    protected _expectedCallCount: all.Times;\r\n    protected _expectedCallType: all.ExpectedCallType;\r\n    protected _isInvoked: boolean;\r\n    protected _callCount: number = 0;\r\n    protected _thrownException: Error;\r\n    protected _evaluatedSuccessfully: boolean;\r\n\r\n    protected constructor(\r\n        public mock: MockBase<T>,\r\n        private _setupExpression: all.IFunc2<T, TResult>,\r\n        interceptor: InterceptorSetup<T>,\r\n        proxy: T) {\r\n\r\n        this._id = this.generateId();\r\n\r\n        _setupExpression(proxy);\r\n\r\n        if (interceptor.interceptedCall) {\r\n            let ic = interceptor.interceptedCall;\r\n\r\n            let newArgs = this.transformToMatchers(ic.args);\r\n            Object.defineProperty(newArgs, \"callee\",\r\n                { configurable: true, enumerable: true, writable: false, value: ic.args.callee });\r\n            ic.args = <IArguments><any>newArgs;\r\n\r\n            this._setupCall = ic;\r\n        }\r\n        else {\r\n            throw new all.MockException(all.MockExceptionReason.InvalidSetup,\r\n                this._setupExpression, `'${this._setupExpression}'`);\r\n        }\r\n    }\r\n\r\n    static ofStaticMock<U, UResult>(mock: MockBase<U>, setupExpression: all.IFunc2<U, UResult>) {\r\n        let interceptor = new InterceptorSetup<U>();\r\n        let proxy = all.ProxyFactory.createProxy<U>(mock.target, interceptor);\r\n        let result = new MethodCall(mock, setupExpression, interceptor, proxy);\r\n        return result;\r\n    }\r\n\r\n    static ofDynamicMock<U, UResult>(mock: MockBase<U>, setupExpression: all.IFunc2<U, UResult>) {\r\n        let interceptor = new InterceptorSetup<U>();\r\n        let proxy = all.ProxyFactory.createProxyES6<U>(mock.target, interceptor);\r\n        let result = new MethodCall(mock, setupExpression, interceptor, proxy);\r\n        return result;\r\n    }\r\n\r\n    private generateId() {\r\n        return \"MethodCall<\" + _.uniqueId() + \">\";\r\n    }\r\n\r\n    private transformToMatchers(args: IArguments): Array<all.IMatch> {\r\n        let newArgs: Array<all.IMatch> = [];\r\n\r\n        _.each(args, (a: any) => {\r\n            if (!_.isObject(a)) {\r\n                let newArg = new all.MatchValue(a);\r\n                newArgs.push(newArg);\r\n            }\r\n            else {\r\n                if (all.Match.isMatcher(a)) {\r\n                    newArgs.push(<all.IMatch>a);\r\n                }\r\n                else {\r\n                    // assume strict equality, short form of It.is(x => _.isEqual(x, a))\r\n                    let newArg = new all.MatchPred(x => _.isEqual(x, a));\r\n                    newArgs.push(newArg);\r\n                }\r\n            }\r\n        });\r\n\r\n        return newArgs;\r\n    }\r\n\r\n    // IProxyCall\r\n\r\n    get id(): string { return this._id; }\r\n    get setupExpression(): all.IAction1<T> { return this._setupExpression; }\r\n    get setupCall(): all.ICallContext { return this._setupCall; }\r\n    get isVerifiable(): boolean { return this._isVerifiable; }\r\n    get isInSequence(): boolean { return this._expectedCallType === all.ExpectedCallType.InSequence; }\r\n    get expectedCallCount(): all.Times { return this._expectedCallCount; }\r\n    get isInvoked(): boolean { return this._isInvoked; }\r\n    get callCount(): number { return this._callCount; }\r\n\r\n    setVerifiable(\r\n        times: all.Times = all.Times.once(),\r\n        expectedCallType: all.ExpectedCallType = all.ExpectedCallType.InAnyOrder): void {\r\n\r\n        this._isVerifiable = true;\r\n        this._expectedCallCount = times;\r\n        this._expectedCallType = expectedCallType;\r\n    }\r\n\r\n    evaluatedSuccessfully() {\r\n        this._evaluatedSuccessfully = true;\r\n    }\r\n\r\n    matches(call: all.ICallContext): boolean {\r\n        let match = false;\r\n\r\n        if (this._setupCall.property && call && call.property &&\r\n            this._setupCall.property.name === call.property.name) {\r\n\r\n            if (this._setupCall.args.length >= call.args.length) {\r\n                match = true;\r\n\r\n                if (!call.isAnUnknownDynamicCallAtExecution) {\r\n\r\n                    _.each(this._setupCall.args, (x: any, index: number) => {\r\n                        let setupArg = <all.IMatch>x;\r\n                        let callArg = call.args[index];\r\n\r\n                        if (match && !setupArg.___matches(callArg))\r\n                            match = false;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        return match;\r\n    }\r\n\r\n    execute(call: all.ICallContext): void {\r\n        this._isInvoked = true;\r\n\r\n        if (this._setupCallback != null) {\r\n            this._setupCallback.apply(this, call.args);\r\n        }\r\n\r\n        if (this._thrownException != null) {\r\n            throw this._thrownException;\r\n        }\r\n\r\n        this._callCount++;\r\n    }\r\n\r\n    // IVerifies\r\n\r\n    verifiable(\r\n        times?: all.Times,\r\n        expectedCallType?: all.ExpectedCallType): void {\r\n\r\n        this.setVerifiable(times, expectedCallType);\r\n    }\r\n\r\n    toString(): string {\r\n        let res = `${this.setupCall}`;\r\n        if (this.expectedCallCount)\r\n            res = `${res}, ${this.expectedCallCount}`;\r\n        return res;\r\n    }\r\n\r\n}\r\n","import * as all from \"./_all\";\r\nimport { MockBase } from \"./MockBase\";\r\nimport { InterceptorSetup } from \"./InterceptorSetup\";\r\nimport { MethodCall } from \"./MethodCall\";\r\n\r\nexport class MethodCallReturn<T, TResult> extends MethodCall<T, TResult> implements all.ISetup<T, TResult>, all.IReturnsResult<T> {\r\n\r\n    protected _returnValueFunc: all.IFuncN<any, TResult>;\r\n    hasReturnValue: boolean;\r\n    protected _callBase: boolean;\r\n    private readonly _overrideTarget: boolean;\r\n\r\n    private constructor(\r\n        mock: MockBase<T>,\r\n        setupExpression: all.IFunc2<T, TResult>,\r\n        interceptor: InterceptorSetup<T>,\r\n        proxy: T) {\r\n\r\n        super(mock, setupExpression, interceptor, proxy);\r\n\r\n        this._overrideTarget = mock.canOverrideTarget;\r\n    }\r\n\r\n    static ofStaticMock<U, UResult>(mock: MockBase<U>, setupExpression: all.IFunc2<U, UResult>) {\r\n        let interceptor = new InterceptorSetup<U>();\r\n        let proxy = all.ProxyFactory.createProxy<U>(mock.target, interceptor);\r\n        let result = new MethodCallReturn(mock, setupExpression, interceptor, proxy);\r\n        return result;\r\n    }\r\n\r\n    static ofDynamicMock<U, UResult>(mock: MockBase<U>, setupExpression: all.IFunc2<U, UResult>) {\r\n        let interceptor = new InterceptorSetup<U>();\r\n        let proxy = all.ProxyFactory.createProxyES6<U>(mock.target, interceptor);\r\n        let result = new MethodCallReturn(mock, setupExpression, interceptor, proxy);\r\n        return result;\r\n    }\r\n\r\n    // overrides\r\n\r\n    execute(call: all.ICallContext): void {\r\n        super.execute(call);\r\n\r\n        if (this._callBase)\r\n            call.invokeBase();\r\n        else if (this.hasReturnValue) {\r\n            call.returnValue = this._returnValueFunc.apply(this, call.args);\r\n            // help ProxyES6 identify value getter invocation at execution time\r\n            call.property.desc = { value: this.setupCall.property.desc && this.setupCall.property.desc.value };\r\n        }\r\n    }\r\n\r\n    // ISetup\r\n\r\n    callback(action: all.IActionN<any>): all.IReturnsThrows<T, TResult> {\r\n        this._setupCallback = action;\r\n        return this;\r\n    }\r\n\r\n    throws(exception: Error): all.IThrowsResult {\r\n        this._thrownException = exception;\r\n        return this;\r\n    }\r\n\r\n    returns(valueFunc: all.IFuncN<any, TResult>): all.IReturnsResult<T> {\r\n        this._returnValueFunc = valueFunc;\r\n        this.hasReturnValue = true;\r\n\r\n        // override target\r\n        if (this._overrideTarget) {\r\n            let obj: Object = this.mock.target;\r\n            let name: string = this.setupCall.property.name;\r\n            let desc: all.PropDescriptor = this.setupCall.property.desc;\r\n\r\n            if (!desc &&\r\n                this.setupCall.proxyType == all.ProxyType.DYNAMIC) {\r\n                // enable target property enumeration for dynamic mocks\r\n                desc = {};\r\n                desc.configurable = true;\r\n                desc.enumerable = true;\r\n                desc.value = null;\r\n                Object.defineProperty(obj, name, desc);\r\n            }\r\n            else if (desc) {\r\n                desc.configurable = true;\r\n                desc.enumerable = true;\r\n                desc.value = this._returnValueFunc;\r\n                Object.defineProperty(obj, name, desc);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    callBase(): all.IReturnsResult<T> {\r\n        this._callBase = true;\r\n        return this;\r\n    }\r\n\r\n    // IReturnsResult\r\n\r\n}","import * as _ from \"lodash\";\r\nimport * as all from \"./_all\";\r\nimport { MockBase } from \"./MockBase\";\r\nimport { MockBehavior } from \"./_all\";\r\nimport { InterceptorExecute } from \"./InterceptorExecute\";\r\nimport { MethodCall } from \"./MethodCall\";\r\nimport { MethodCallReturn } from \"./MethodCallReturn\";\r\n\r\nexport class StaticMock<T> extends MockBase<T> {\r\n\r\n    private constructor(\r\n        target: T, \r\n        canOverrideTarget: boolean, \r\n        behavior: all.MockBehavior) {\r\n        \r\n        super(target, canOverrideTarget, behavior);\r\n        \r\n        this._interceptor = new InterceptorExecute(this);\r\n        this._proxy = all.ProxyFactory.createProxy<T>(target, this._interceptor);\r\n    }\r\n\r\n    static ofInstance<U>(targetInstance: U, behavior: all.MockBehavior): all.IMock<U> {\r\n        targetInstance = StaticMock.cloneDeep(targetInstance);\r\n        let mock: StaticMock<U> = new StaticMock(targetInstance, true, behavior);\r\n        return mock;\r\n    }\r\n\r\n    static ofGlobalInstance<U>(targetInstance: U, behavior: all.MockBehavior): all.IMock<U> {\r\n        let mock: StaticMock<U> = new StaticMock(targetInstance, false, behavior);\r\n        return mock;\r\n    }\r\n\r\n    static ofType<U>(targetConstructor: all.CtorWithArgs<U>, behavior: all.MockBehavior, targetConstructorArgs: any[]): all.IMock<U> {\r\n        let targetInstance: U = all.Utils.conthunktor(targetConstructor, targetConstructorArgs);\r\n        let mock: StaticMock<U> = new StaticMock(targetInstance, true, behavior);\r\n        return mock;\r\n    }\r\n\r\n    private static cloneDeep<T>(target: T): T {\r\n        let copy = target;\r\n        if (!_.isFunction(target)) {\r\n            let func = (x: any): any => {\r\n                var value: any;\r\n                if (all.ProxyES5.isProxy(x))\r\n                    return x;\r\n            };\r\n            copy = _.cloneDeepWith(target, func);\r\n        }\r\n        return copy;\r\n    }\r\n\r\n    // setup\r\n\r\n    setup<TResult>(expression: all.IFunc2<T, TResult>): MethodCallReturn<T, TResult> {\r\n        let call = MethodCallReturn.ofStaticMock(this, expression);\r\n        this._interceptor.addExpectedCall(call);\r\n        return call;\r\n    }\r\n\r\n    // verify\r\n\r\n    verify<TResult>(expression: all.IFunc2<T, TResult>, times: all.Times): void {\r\n        let call = MethodCall.ofStaticMock(this, expression);\r\n        this._interceptor.addExpectedCall(call);\r\n        try {\r\n            this._interceptor.verifyCallCount(call, times);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n}","import * as all from \"./_all\";\r\nimport { MockBase } from \"./MockBase\";\r\nimport { MockBehavior } from \"./_all\";\r\nimport { InterceptorExecute } from \"./InterceptorExecute\";\r\nimport { MethodCall } from \"./MethodCall\";\r\nimport { MethodCallReturn } from \"./MethodCallReturn\";\r\n\r\nexport class DynamicMock<T> extends MockBase<T> {\r\n\r\n    private constructor(\r\n        target: T,\r\n        name: string,\r\n        canOverrideTarget: boolean,\r\n        behavior: all.MockBehavior) {\r\n\r\n        super(target, canOverrideTarget, behavior);\r\n\r\n        if (name)\r\n            this._name = name;\r\n\r\n        this._interceptor = new InterceptorExecute(this);\r\n        this._proxy = all.ProxyFactory.createProxyES6<T>(target, this._interceptor);\r\n    }\r\n\r\n    static ofType<U>(name: string, behavior: all.MockBehavior): all.IMock<U> {\r\n        let mock: DynamicMock<U> = new DynamicMock<U>(<any>(() => { }), name, true, behavior);\r\n        return mock;\r\n    }\r\n\r\n    // setup\r\n\r\n    setup<TResult>(expression: all.IFunc2<T, TResult>): MethodCallReturn<T, TResult> {\r\n        let call = MethodCallReturn.ofDynamicMock(this, expression);\r\n        this._interceptor.addExpectedCall(call);\r\n        return call;\r\n    }\r\n\r\n    // verify\r\n\r\n    verify<TResult>(expression: all.IFunc2<T, TResult>, times: all.Times): void {\r\n        let call = MethodCall.ofDynamicMock(this, expression);\r\n        this._interceptor.addExpectedCall(call);\r\n        try {\r\n            this._interceptor.verifyCallCount(call, times);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n}","import * as common from \"../Common/_all\";\r\nimport { MockBehavior } from \"./MockBehavior\";\r\nimport { IMock } from \"./IMock\";\r\nimport { StaticMock } from \"../StaticMock\";\r\nimport { DynamicMock } from \"../DynamicMock\";\r\n\r\nexport class MockApi {\r\n\r\n    static ofInstance<U>(targetInstance: U, behavior = MockBehavior.Loose): IMock<U> {\r\n        let mock = StaticMock.ofInstance(targetInstance, behavior);\r\n        return mock;\r\n    }\r\n\r\n    static ofType<U>(targetConstructor?: common.CtorWithArgs<U>, behavior = MockBehavior.Loose, ...targetConstructorArgs: any[]): IMock<U> {\r\n        let mock: IMock<U>;\r\n        if (targetConstructor)\r\n            mock = MockApi.ofType2(targetConstructor, targetConstructorArgs, behavior);\r\n        else\r\n            mock = DynamicMock.ofType<U>(undefined, behavior);\r\n        return mock;\r\n    }\r\n\r\n    static ofType2<U>(targetConstructor: common.CtorWithArgs<U>, targetConstructorArgs: any[], behavior = MockBehavior.Loose): IMock<U> {\r\n        let mock: IMock<U> = StaticMock.ofType(targetConstructor, behavior, targetConstructorArgs);\r\n        return mock;\r\n    }\r\n\r\n}","import * as common from \"../Common/_all\";\r\nimport * as match from \"../Match/_all\";\r\n\r\nexport class It {\r\n\r\n    static isValue<T>(x: T): T {\r\n        let matcher: match.IMatch = new match.MatchValue(x);\r\n        return <any>matcher;\r\n    }\r\n\r\n    static isObjectWith<T>(x: { [P in keyof T]?: T[P] }): T {\r\n        let matcher: match.IMatch = new match.MatchObjectWith(x);\r\n        return <any>matcher;\r\n    }\r\n\r\n    static isAnyObject<T>(x: common.Ctor<T>): T {\r\n        let matcher: match.IMatch = new match.MatchAnyObject(x);\r\n        return <any>matcher;\r\n    }\r\n\r\n    static isAny(): any {\r\n        let matcher: match.IMatch = new match.MatchAny();\r\n        return <any>matcher;\r\n    }\r\n\r\n    static isAnyString(): string {\r\n        let matcher: match.IMatch = new match.MatchAnyString();\r\n        return <any>matcher;\r\n    }\r\n\r\n    static isAnyNumber(): number {\r\n        let matcher: match.IMatch = new match.MatchAnyNumber();\r\n        return <any>matcher;\r\n    }\r\n\r\n    static is<T>(predicate: common.IFunc2<T, boolean>): T {\r\n        let matcher: match.IMatch = new match.MatchPred(predicate);\r\n        return <any>matcher;\r\n    }\r\n}\r\n","import * as all from \"./_all\";\r\nimport { MockBehavior } from \"./_all\";\r\nimport { MethodCallReturn } from \"./MethodCallReturn\";\r\n\r\nexport enum GlobalType { Class, Function, Value }\r\n\r\nexport class GlobalMock<T> implements all.IGlobalMock<T> {\r\n\r\n    constructor(public mock: all.IMock<T>, private _name: string, private _type: GlobalType, public container: Object) {\r\n        if (!this._name)\r\n            this._name = mock.name;\r\n    }\r\n\r\n    get object() { return this.mock.object; }\r\n\r\n    get name() { return this._name || this.mock.name; }\r\n    get behavior() { return this.mock.behavior; }\r\n\r\n    get callBase() { return this.mock.callBase; }\r\n    set callBase(value: boolean) { this.mock.callBase = value; }\r\n\r\n    get type() { return this._type; }\r\n\r\n    // setup\r\n\r\n    setup<TResult>(expression: all.IFunc2<T, TResult>): MethodCallReturn<T, TResult> {\r\n        return this.mock.setup(expression);\r\n    }\r\n\r\n    // verify\r\n\r\n    verify<TResult>(expression: all.IFunc2<T, TResult>, times: all.Times): void {\r\n        this.mock.verify(expression, times);\r\n    }\r\n\r\n    verifyAll(): void {\r\n        this.mock.verifyAll();\r\n    }\r\n\r\n    reset(): void {\r\n        this.mock.reset();\r\n    }\r\n}","import * as _ from \"lodash\";\r\nimport * as common from \"../Common/_all\";\r\nimport { MockBehavior } from \"./MockBehavior\";\r\nimport { IMock } from \"./IMock\";\r\nimport { StaticMock } from \"../StaticMock\";\r\nimport { IGlobalMock } from \"./IGlobalMock\";\r\nimport { GlobalMock as GMock, GlobalType } from \"../GlobalMock\";\r\nimport { DynamicMock } from \"../DynamicMock\";\r\n\r\nexport class GlobalMockApi {\r\n\r\n    static ofInstance<U>(targetInstance: U, globalName?: string, container: Object = window, behavior = MockBehavior.Loose): IGlobalMock<U> {\r\n        let mock = StaticMock.ofGlobalInstance(targetInstance, behavior);\r\n        let type = _.isFunction(targetInstance) ? GlobalType.Function : GlobalType.Value;\r\n        return new GMock(mock, globalName, type, container);\r\n    }\r\n\r\n    static ofType<U>(targetConstructor: common.Ctor<U>, container: Object = window, behavior = MockBehavior.Loose): IGlobalMock<U> {\r\n        let targetInstance = new targetConstructor();\r\n        let mock: IMock<U> = StaticMock.ofInstance(targetInstance, behavior);\r\n        return new GMock(mock, undefined, GlobalType.Class, container);\r\n    }\r\n\r\n    static ofType2<U>(globalName: string, container: Object = window, behavior = MockBehavior.Loose): IGlobalMock<U> {\r\n        let mock: IMock<U> = DynamicMock.ofType<U>(globalName, behavior);\r\n        return new GMock(mock, undefined, GlobalType.Class, container);\r\n    }\r\n\r\n}","import * as _ from \"lodash\";\r\nimport * as all from \"./_all\";\r\nimport { GlobalType } from \"./GlobalMock\";\r\n\r\nexport class GlobalScope implements all.IUsingResult {\r\n\r\n    constructor(private _args: all.IGlobalMock<any>[]) {\r\n    }\r\n\r\n    with(action: all.IAction): void {\r\n        let initial: all.PropDescriptorMap = {};\r\n\r\n        try {\r\n            _.each(this._args, (a: all.IGlobalMock<any>) => {\r\n                let containerProps = all.PropertyRetriever.getOwnAndPrototypeEnumerablesAndNonenumerables(a.container);\r\n                let prop = _.find(containerProps, (p: { name: string; desc: all.PropDescriptor }) => p.name === a.name);\r\n\r\n                if (prop) {\r\n\r\n                    initial[a.name] = prop.desc;\r\n\r\n                    let desc: all.PropDescriptor = {};\r\n\r\n                    switch (a.type) {\r\n\r\n                        case GlobalType.Class:\r\n                            //TODO: return a new mock every time with same interceptor as the one used by mock passed in as arg to 'using' \r\n                            //      (to support different ctor arguments)\r\n                            desc.value = () => a.mock.object;\r\n                            break;\r\n\r\n                        case GlobalType.Function:\r\n                            desc.value = a.mock.object;\r\n                            break;\r\n\r\n                        case GlobalType.Value:\r\n                            desc.get = () => a.mock.object;\r\n                            break;\r\n\r\n                        default:\r\n                            throw new all.MockException(\r\n                                all.MockExceptionReason.UnknownGlobalType, a, `unknown global type: ${a.type}`);\r\n                    }\r\n\r\n                    try {\r\n                        Object.defineProperty(a.container, a.name, desc);\r\n                    } catch (e) {\r\n                        console.log(`1: ${e}`);\r\n                    }\r\n                }\r\n            });\r\n\r\n            action.apply(this, this._args);\r\n\r\n        } catch (e) {\r\n            console.log(`2: ${e}`);\r\n        } finally {\r\n            _.each(this._args, (a: all.IGlobalMock<any>) => {\r\n                    let desc: all.PropDescriptor = initial[a.name];\r\n\r\n                    if (desc) {\r\n\r\n                        switch (a.type) {\r\n\r\n                            case GlobalType.Class:\r\n                                break;\r\n\r\n                            case GlobalType.Function:\r\n                                break;\r\n\r\n                            case GlobalType.Value:\r\n                                desc.configurable = true;\r\n                                break;\r\n\r\n                            default:\r\n                        }\r\n\r\n                        try {\r\n                            Object.defineProperty(a.container, a.name, desc);\r\n                        } catch (e) {\r\n                            console.log(`3: ${e}`);\r\n                        }\r\n                    }\r\n                });\r\n        }\r\n    }\r\n}","import * as all from \"./_all\";\r\nimport { IUsingResult } from \"./IUsing\";\r\nimport { GlobalScope as GScope } from \"../GlobalScope\";\r\n\r\nexport class GlobalScopeApi {\r\n\r\n    static using(...args: all.IGlobalMock<any>[]): IUsingResult {\r\n        let scope = new GScope(args);\r\n        return scope;\r\n    }\r\n\r\n}"],"names":["MockBehavior","ExpectedCallType","__extends","_.template","error.MockException","error.MockExceptionReason","_.find","_.isNil","_.isUndefined","CircularJSON.stringify","_.join","common.Utils","_.isString","_.isNumber","_.cloneDeep","_.isEqual","_.pick","_.keys","_.isFunction","common.PropertyRetriever","_.each","_.isObject","_.isArray","_.isDate","_.isNull","inv.MethodInfo","inv.MethodInvocation","inv.PropertyInfo","inv.DynamicGetInvocation","inv.ValueSetterInvocation","all.MockBehavior","_.uniqueId","all.Utils","_.remove","_.filter","all.CallType","all.MockException","all.MockExceptionReason","all.InvocationType","_.some","_.sum","strategy.AddActualInvocation","strategy.ExtractProxyCall","strategy.ExecuteCall","strategy.InvokeBase","strategy.HandleMockRecursion","all.ProxyType","all.ProxyFactory","all.MatchValue","all.Match","all.MatchPred","all.ExpectedCallType","all.Times","all.ProxyES5","_.cloneDeepWith","match.MatchValue","match.MatchObjectWith","match.MatchAnyObject","match.MatchAny","match.MatchAnyString","match.MatchAnyNumber","match.MatchPred","GMock","all.PropertyRetriever","GScope"],"mappings":"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"}